DISABLE_AUTO_TITLE="true"
DISABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="false"

source "$HOME/.antigen/antigen.zsh"

antigen use oh-my-zsh

antigen bundles <<EOBUNDLES

# Guess what to install when running an unknown command.
command-not-found
colored-man

zsh-users/zsh-completions
EOBUNDLES

# Theme
# antigen theme steeef
# antigen theme dstufft
# antigen theme jonathan
# antigen theme smt
# antigen bundle sindresorhus/pure
antigen bundle sindresorhus/pure

antigen bundle chriskempson/base16-shell base16-colors.dark.sh

is_linux () {
    [[ $('uname') == 'Linux' ]];
}

is_osx () {
    [[ $('uname') == 'Darwin' ]]
}

if is_osx; then
  antigen bundle osx
fi

antigen bundle zsh-users/zsh-history-substring-search
if is_osx; then
  # zsh-history-substring-search
  # bind UP and DOWN arrow keys
  bindkey '^[[A' history-substring-search-up
  bindkey '^[[B' history-substring-search-down
elif is_linux; then
  # bind UP and DOWN arrow keys
  zmodload zsh/terminfo
  bindkey "$terminfo[kcuu1]" history-substring-search-up
  bindkey "$terminfo[kcud1]" history-substring-search-down

  # bind P and N for EMACS mode
  bindkey -M emacs '^P' history-substring-search-up
  bindkey -M emacs '^N' history-substring-search-down

  # bind k and j for VI mode
  bindkey -M vicmd 'k' history-substring-search-up
  bindkey -M vicmd 'j' history-substring-search-down
fi

command_exists () {
    type "$1" &> /dev/null;
}

if command_exists phing; then
  antigen bundle phing
fi

if command_exists composer; then
  antigen bundle composer
fi

if command_exists pip; then
  antigen bundle pip
fi

if command_exists vagrant; then
  antigen bundle vagrant
fi

if command_exists git-extras; then
  antigen bundle git-extras
fi

if command_exists rvm; then
  antigen bundle rvm
fi

if command_exists rails; then
  antigen bundle rails
fi

if command_exists node; then
  antigen bundle node
  antigen bundle npm
  antigen bundle nvm
fi

antigen apply

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/share/npm/bin
export VISUAL=vim
export GREP_OPTIONS='--color=always'

# if [ -f "$ZSH_SYNTAX_HIGHLIGHTING_PLUGIN" ]; then
#     source $ZSH_SYNTAX_HIGHLIGHTING_PLUGIN

#     # Enable highlighters - https://coderwall.com/p/qmvfya
#     ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)

#     # Override highlighter colors
#     ZSH_HIGHLIGHT_STYLES[default]=none
#     ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=009
#     ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=009,standout
#     ZSH_HIGHLIGHT_STYLES[alias]=fg=white,bold
#     ZSH_HIGHLIGHT_STYLES[builtin]=fg=white,bold
#     ZSH_HIGHLIGHT_STYLES[function]=fg=white,bold
#     ZSH_HIGHLIGHT_STYLES[command]=fg=white,bold
#     ZSH_HIGHLIGHT_STYLES[precommand]=fg=white,underline
#     ZSH_HIGHLIGHT_STYLES[commandseparator]=none
#     ZSH_HIGHLIGHT_STYLES[hashed-command]=fg=009
#     ZSH_HIGHLIGHT_STYLES[path]=fg=214,underline
#     ZSH_HIGHLIGHT_STYLES[globbing]=fg=063
#     ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=white,underline
#     ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=green
#     ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=green
#     ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
#     ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=063
#     ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=063
#     ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=009
#     ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=009
#     ZSH_HIGHLIGHT_STYLES[assign]=none
# fi

# ZSH_AUTOSUGGESTIONS=~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/autosuggestions.zsh

# if [ -f "$ZSH_AUTOSUGGESTIONS" ]; then
#   source $ZSH_AUTOSUGGESTIONS

#   # Enable autosuggestions automatically
#   zle-line-init() {
#     zle autosuggest-start
#   }
#   zle -N zle-line-init

#   # use ctrl+t to toggle autosuggestions(hopefully this wont be needed as
#   # zsh-autosuggestions is designed to be unobtrusive)
#   bindkey '^T' autosuggest-toggle
# fi

# User ctrl-z like alt-tab
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line
  else
    zle push-input
    zle clear-screen
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# From: http://askubuntu.com/questions/1577/moving-from-bash-to-zsh
autoload -U compinit

for func in $^fpath.zwc(N-.r:); autoload -U -w $func

setopt completeinword
setopt prompt_subst

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*:killall:*' command 'ps -u $USER -o cmd'

autoload select-word-style
select-word-style shell

alias ll='ls -l'
alias la='ls -a'

HISTFILE=~/.zhistory
HISTSIZE=SAVEHIST=5000
setopt incappendhistory
setopt sharehistory
setopt extendedhistory

# superglobs
setopt extendedglob
unsetopt caseglob
unsetopt nomatch 2>/dev/null

setopt interactivecomments # pound sign in interactive prompt

setopt auto_cd

if is_linux; then
    # alias 'a=sudo apt-get'
    # alias 'ai=sudo apt-get install'
    # alias 'ar=sudo apt-get remove'
    # alias 'au=sudo apt-get update'
    # alias 'ag=sudo apt-get safe-upgrade'
    # alias 'as=apt-cache search'
    # alias 'aw=apt-cache show'
    # alias 'ad=sudo apt-get dist-upgrade'
elif  is_osx; then
    export PATH=${PATH}:/Users/faceleg/Work/SDK/adt-bundle/sdk/platform-tools:/Users/faceleg/Work/SDK/adt-bundle/sdk/tools
fi

# Vi mode
#bindkey -v
#bindkey '^R' history-incremental-pattern-search-backward
#
## Allow deleting backwards
## http://www.zsh.org/mla/workers/2008/msg01653.html
#bindkey -M viins '^?' backward-delete-char
#bindkey -M viins '^H' backward-delete-char

# 10ms for key sequences
KEYTIMEOUT=1

# If the tmux scripts have been installed, alias them
if [[ -x "`eval echo ~/.tmux-scripts/switch-create-attach.sh`" ]]; then
    alias 'tmux-switch=~/.tmux-scripts/switch-create-attach.sh'
fi

alias tmux='tmux -2'

source /usr/local/rvm/scripts/rvm
export _JAVA_OPTIONS="-Xmx4096m -Xms1024m"

# TMUX
if [[ -z $TMUX ]]; then
    # Attempt to discover a detached session and attach it, else create a new session
    CURRENT_USER=$(whoami)
    if tmux has-session -t $CURRENT_USER 2>/dev/null; then
        tmux -2 attach-session -t $CURRENT_USER
    else
        tmux -2 new-session -s $CURRENT_USER
    fi
else
    # If inside tmux session then print MOTD
    MOTD=/etc/motd.tcl
    if [ -f $MOTD ]; then
        $MOTD
    fi
fi

