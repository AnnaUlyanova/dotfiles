# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

ZSH_THEME="smt-vi"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable autosetting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

is_linux () {
    [[ $('uname') == 'Linux' ]];
}

is_osx () {
    [[ $('uname') == 'Darwin' ]]
}

command_exists () {
    type "$1" &> /dev/null;
}

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
USER_PLUGINS=(git git-flow rsync themes urltools zsh-syntax-highlighting vagrant web-search autojump)

if  is_osx; then
    USER_PLUGINS+=(osx)
    if command_exists brew; then
        USER_PLUGINS+=(brew)
    fi
    if command_exists node; then
        USER_PLUGINS+=(node npm)
    fi
else
    USER_PLUGINS+=(command-not-found)
fi

if command_exists phing; then
    USER_PLUGINS+=(phing)
fi

if command_exists composer; then
    USER_PLUGINS+=(composer)
fi

if command_exists pip; then
    USER_PLUGINS+=(pip)
fi

if command_exists vagrant; then
    USER_PLUGINS+=(vagrant)
fi

if command_exists git-extras; then
    USER_PLUGINS+=(git-extras)
fi

#if command_exists rbenv; then
#    # ZSH rbenv plugin doesn't work on not Mac OS so doing it manually
#    # export PATH="$HOME/.rbenv/bin:$PATH"
#    # eval "$(rbenv init -)"
#    USER_PLUGINS+=(rbenv)
#fi

plugins=($USER_PLUGINS)

# Customize to your needs...
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/share/npm/bin
source $ZSH/oh-my-zsh.sh
export VISUAL=vim
# export GREP_OPTIONS='--color=always'

ZSH_SYNTAX_HIGHLIGHTING_PLUGIN=~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

if [ -f "$ZSH_SYNTAX_HIGHLIGHTING_PLUGIN" ]; then
    source $ZSH_SYNTAX_HIGHLIGHTING_PLUGIN

    # Enable highlighters - https://coderwall.com/p/qmvfya
    ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)

    # Override highlighter colors
    ZSH_HIGHLIGHT_STYLES[default]=none
    ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=009
    ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=009,standout
    ZSH_HIGHLIGHT_STYLES[alias]=fg=white,bold
    ZSH_HIGHLIGHT_STYLES[builtin]=fg=white,bold
    ZSH_HIGHLIGHT_STYLES[function]=fg=white,bold
    ZSH_HIGHLIGHT_STYLES[command]=fg=white,bold
    ZSH_HIGHLIGHT_STYLES[precommand]=fg=white,underline
    ZSH_HIGHLIGHT_STYLES[commandseparator]=none
    ZSH_HIGHLIGHT_STYLES[hashed-command]=fg=009
    ZSH_HIGHLIGHT_STYLES[path]=fg=214,underline
    ZSH_HIGHLIGHT_STYLES[globbing]=fg=063
    ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=white,underline
    ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=green
    ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=green
    ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
    ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=063
    ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=063
    ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=009
    ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=009
    ZSH_HIGHLIGHT_STYLES[assign]=none
fi

# From: http://askubuntu.com/questions/1577/moving-from-bash-to-zsh
autoload -U compinit

for func in $^fpath.zwc(N-.r:); autoload -U -w $func

setopt completeinword
setopt prompt_subst

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*:killall:*' command 'ps -u $USER -o cmd'

autoload select-word-style
select-word-style shell

alias ll='ls -l'
alias la='ls -a'

HISTFILE=~/.zhistory
HISTSIZE=SAVEHIST=5000
setopt incappendhistory
setopt sharehistory
setopt extendedhistory

# superglobs
setopt extendedglob
unsetopt caseglob
unsetopt nomatch 2>/dev/null

setopt interactivecomments # pound sign in interactive prompt

setopt auto_cd

if is_linux; then
    alias 'a=sudo apt-get'
    alias 'ai=sudo apt-get install'
    alias 'ar=sudo apt-get remove'
    alias 'au=sudo apt-get update'
    alias 'ag=sudo apt-get safe-upgrade'
    alias 'as=apt-cache search'
    alias 'aw=apt-cache show'
    alias 'ad=sudo apt-get dist-upgrade'
elif  is_osx; then
    export PATH=${PATH}:/Users/faceleg/Work/SDK/adt-bundle/sdk/platform-tools:/Users/faceleg/Work/SDK/adt-bundle/sdk/tools
fi

# Vi mode
bindkey -v
bindkey '^R' history-incremental-pattern-search-backward

# Allow deleting backwards
# http://www.zsh.org/mla/workers/2008/msg01653.html
bindkey -M viins '^?' backward-delete-char
bindkey -M viins '^H' backward-delete-char

# 10ms for key sequences
KEYTIMEOUT=1

# If the tmux scripts have been installed, alias them
if [[ -x "`eval echo ~/.tmux-scripts/switch-create-attach.sh`" ]]; then
    alias 'tmux-switch=~/.tmux-scripts/switch-create-attach.sh'
fi

# TMUX
if [[ -z $TMUX ]]; then
    # Attempt to discover a detached session and attach it, else create a new session
    CURRENT_USER=$(whoami)
    if tmux has-session -t $CURRENT_USER 2>/dev/null; then
        tmux -2 attach-session -t $CURRENT_USER
    else
        tmux -2 new-session -s $CURRENT_USER
    fi
else
    # If inside tmux session then print MOTD
    MOTD=/etc/motd.tcl
    if [ -f $MOTD ]; then
        $MOTD
    fi
fi

