" Profile startup time
" vim --startuptime vim.log -c q
" vim -c 'r ! cat vim.log| sort -k 2'

scriptencoding utf-8

let $NVIM_TUI_ENABLE_TRUE_COLOR=1

set shell=/bin/bash

" The mapleader has to be set before vundle starts loading all the plugins.
let g:mapleader=';'
let g:maplocalleader='\'

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

" NeoBundleInitialisation {{{
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
  if !isdirectory(expand('~/.vim/bundle/neobundle.vim'))
    echo "Installing NeoBundle\n"
    silent execute '!mkdir -p ~/.vim/bundle'
    silent execute '!git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim'
  endif
endif

call g:neobundle#begin(expand('~/.vim/bundle/'))

let g:neobundle#install_process_timeout = 2000
let g:neobundle#default_options._ = { 'verbose' : 1, 'focus' : 1 }

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Inspired by https://raw.githubusercontent.com/hecomi/dotfiles/master/.vimrc
function! s:neobundle_lazy_for(bundle, ...)
  call g:neobundle#parser#lazy([a:bundle])
  let l:bundle = split( substitute(a:bundle, "['\", ]", '', 'g'), '/' )
  let l:name = l:bundle[len(l:bundle) - 1]

  let l:additional_configuration = {}
  let l:autoload = { 'autoload': {}}

  if a:0 == 1
    let l:additional_configuration = a:1
  endif

  if a:0 >= 2
    let l:autoload['autoload'][a:1] = a:2
  endif

  if a:0 == 3
    let l:additional_configuration = a:3
  endif

  if (has_key(l:additional_configuration, 'autoload'))
    call extend(l:autoload['autoload'], l:additional_configuration['autoload'])
  endif

  let l:configuration = {
        \ 'lazy' : 1,
        \ }

  call extend(l:configuration, l:additional_configuration)
  call extend(l:configuration, l:autoload)

  call g:neobundle#config(l:name, l:configuration)
endfunction

command! -nargs=+ NeoBundleLazyFor
      \ call s:neobundle_lazy_for(<args>)
"}}}

NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make',
      \     'linux' : 'make',
      \     'unix' : 'gmake'
      \    },
      \ }
NeoBundle 'rhysd/auto-neobundle', {
      \ 'depends': ['unite.vim', 'vimproc']
      \ }
augroup AutoNeoBundle
  autocmd!
  autocmd VimEnter * call auto_neobundle#update_weekly()
augroup END
"}}}

" Highlighting
NeoBundle 'chriskempson/base16-vim'

" Visual
NeoBundleLazyFor 'jaxbot/semantic-highlight.vim', 'filetypes', [
      \ 'javascript', 'typescript', 'java', 'ruby', 'php', 'vim', 'coffee' ]
let g:semanticTermColors = [1,2,3,4,5,6,7,25,9,10,12,13,14,15,16,17,19,20]
let g:semanticEnableFileTypes = {
      \ 'javascript': 'js',
      \ 'typescript': 'ts',
      \ 'coffee': 'coffee',
      \ 'vim': 'vim',
      \ 'php': 'php',
      \ }
let g:semanticUseCache = 1
let g:semanticPersistCache = 1
NeoBundle 'miyakogi/conoline.vim'
  let g:conoline_auto_enable = 1
  let g:conoline_use_colorscheme_default_normal=1
  let g:conoline_use_colorscheme_default_insert=1
NeoBundle 'vim-utils/vim-troll-stopper'

" Text Objects
NeoBundle 'wellle/targets.vim', { 'depends': 'kana/vim-textobj-user' }
  " ( ) b (work on parentheses)
  " { } B (work on curly braces)
  " [ ] (work on square brackets)
  " < > (work on angle brackets)
  " t (work on tags)<Paste>
NeoBundle 'b4winckler/vim-angry', { 'depends': 'kana/vim-textobj-user' }
NeoBundle 'kana/vim-textobj-line', { 'depends': 'kana/vim-textobj-user' }
NeoBundle 'kana/vim-textobj-entire', { 'depends': 'kana/vim-textobj-user' }
  " ie, ae
NeoBundle 'kana/vim-textobj-underscore', { 'depends': 'kana/vim-textobj-user' }
NeoBundle 'gilligan/textobj-gitgutter', { 'depends': 'kana/vim-textobj-user' }
  let g:textobj_gitgutter_no_default_key_mappings = 0
  omap ag <Plug>(textobj-gitgutter-i)
  omap ig <Plug>(textobj-gitgutter-i)
  vmap ag <Plug>(textobj-gitgutter-i)
  vmap ig <Plug>(textobj-gitgutter-i)
NeoBundle 'kana/vim-textobj-lastpat', { 'depends': 'kana/vim-textobj-user' }
  let g:textobj_lastpat_no_default_key_mappings = 0
  omap ah <Plug>(textobj-lastpat-n)
  omap ih <Plug>(textobj-lastpat-n)
  omap aH <Plug>(textobj-lastpat-N)
  omap iH <Plug>(textobj-lastpat-N)
  vmap ah <Plug>(textobj-lastpat-n)
  vmap ih <Plug>(textobj-lastpat-n)
  vmap aH <Plug>(textobj-lastpat-N)
  vmap iH <Plug>(textobj-lastpat-N)
NeoBundle 'Julian/vim-textobj-variable-segment', { 'depends': 'kana/vim-textobj-user' }
  " iv, av
NeoBundle 'bkad/CamelCaseMotion'
  " ,e
  " ,w
  " ... etc
NeoBundle 'tyru/operator-camelize.vim', { 'depends': 'kana/vim-operator-user' }
  map <leader>c <Plug>(operator-camelize-toggle)
NeoBundle 'tpope/vim-abolish', { 'depends': 'tpope/vim-repeat' }
NeoBundle 'Julian/vim-textobj-brace', { 'depends': 'kana/vim-textobj-user' }
  " ij, aj
NeoBundle 'kana/vim-textobj-indent', { 'depends': 'kana/vim-textobj-user' }
NeoBundle 'kana/vim-textobj-syntax', { 'depends': 'kana/vim-textobj-user' }
  " iy, ay
NeoBundle 'beloglazov/vim-textobj-quotes', { 'depends': 'kana/vim-textobj-user' }
  " iq, aq
NeoBundle 'saihoooooooo/vim-textobj-space', { 'depends': 'kana/vim-textobj-user' }
  " iS, aS
NeoBundle 'beloglazov/vim-textobj-punctuation', { 'depends': 'kana/vim-textobj-user' }
NeoBundle 'glts/vim-textobj-comment', { 'depends': 'kana/vim-textobj-user' }
NeoBundleLazyFor 'kana/vim-textobj-function', 'filetypes', [
      \ 'c',
      \ 'java',
      \ 'vim',
      \ 'javascript'
      \ ], { 'depends': 'kana/vim-textobj-user' }
NeoBundleLazyFor 'thinca/vim-textobj-function-javascript', 'filetypes', 'javascript', { 'depends': 'kana/vim-textobj-function' }

" Ruby
NeoBundleLazyFor 'tpope/vim-endwise', 'filetypes', 'ruby'
NeoBundleLazyFor 'tpope/vim-rails', 'filetypes', 'ruby'
NeoBundleLazyFor 'nelstrom/vim-textobj-rubyblock', 'filetypes', 'ruby',
      \ { 'depends': 'kana/vim-textobj-user' }
NeoBundleLazyFor 'bootleq/vim-textobj-rubysymbol', 'filetypes', 'ruby',
      \ { 'depends': 'kana/vim-textobj-user' }

NeoBundleLazyFor 'ntpeters/vim-better-whitespace', 'filetypes', [
      \ 'c', 'coffee', 'cpp', 'css', 'less', 'sass', 'scss', 'java', 'php',
      \ 'ruby', 'javascript', 'vim', 'sh', 'nginx', 'xml'
      \ ]
  autocmd FileType c,coffee,cpp,css,less,sass,scss,java,php,ruby,puppet,javascript,vim,sh,nginx,ant,xml autocmd BufWritePre <buffer> StripWhitespace
  let g:better_whitespace_filetypes_blacklist = ['unite']

NeoBundleLazyFor 'whatyouhide/vim-textobj-xmlattr', 'filetypes', ['html', 'xhtml', 'xml'],
      \ { 'depends': 'kana/vim-textobj-user' }
NeoBundleLazyFor 'othree/xml.vim', 'filetypes', ['html', 'xhtml', 'xml']
  let g:xml_use_html = 1
NeoBundleLazyFor 'othree/html5.vim', 'filetypes', ['html', 'xhtml', 'html5']
NeoBundleLazyFor 'inkarkat/closetag.vim', 'filetypes', ['html', 'xhtml', 'xml']

NeoBundle 'tpope/vim-sleuth'
NeoBundle 'sheerun/vim-polyglot'
  let g:vim_json_syntax_conceal = 0
  au BufNewFile,BufRead *.vm set ft=velocity
  au BufNewFile,BufRead *.coffee set ft=coffee
  au BufNewFile,BufRead *.html set ft=html
  let g:polyglot_disabled = ['jinja']
NeoBundleLazyFor 'Chiel92/vim-autoformat', 'filetypes', ['javascript', 'ruby', 'typescript', 'html'], {
      \ 'build': {
      \     'unix': 'npm install -g jscs cssfmt',
      \     'mac': 'npm install -g jscs cssfmt'
      \ }}
  autocmd FileType css,ruby,javascript noremap <buffer> ,af :Autoformat<CR>
NeoBundleLazyFor 'heavenshell/vim-jsdoc', 'filetypes', 'javascript'
  let g:jsdoc_allow_input_prompt = 1
  let g:jsdoc_input_description = 1
  let g:jsdoc_additional_descriptions = 0
  let g:jsdoc_return = 1
  let g:jsdoc_return_type = 1
  let g:jsdoc_return_description = 1
  let g:jsdoc_default_mapping = 0 " default: 1 Set value to 0 to turn off default mapping of :JsDoc

  nnoremap <space>j :JsDoc<cr>

NeoBundleLazyFor 'curist/vim-angular-template', 'filetypes', ['html', 'xhtml', 'jade']

if has("python3") && has("nvim")
  NeoBundle 'Shougo/deoplete.nvim'
    let g:deoplete#enable_at_startup = 1
elseif has('lua')
  NeoBundleLazyFor 'Shougo/neocomplete.vim', { 'autoload': { 'insert': 1 } }
    " brew install vim --with-python --with-ruby --with-perl --with-lua --with-tcl
    " brew install macvim --with-cscope --with-lua --override-system-vim
    " ./configure --with-features=huge --with-x --enable-pythoninterp --enable-python3interp --enable-luainterp --enable-perlinterp  --enable-rubyinterp --with-ruby-command=/usr/bin/ruby --enable-tclinterp --enable-sniff --prefix=/usr --with-global-runtime=/usr/share/vim/site
    set completeopt-=preview
    " set completeopt+=longest,menuone,preview

    let g:acp_enableAtStartup = 0
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#enable_fuzzy_completion = 1
    let g:neocomplete#enable_auto_select = 1
    let g:neocomplete#enable_insert_char_pre = 1
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    let g:neocomplete#data_directory='~/.vim/.cache/neocomplete'

    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
    endif

    let g:neocomplete#force_omni_input_patterns.java = '\k\.\k*'
    let g:neocomplete#force_omni_input_patterns.javascript = '[^. \t]\.\w*'

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g> neocomplete#undo_completion()
    inoremap <expr><C-l> neocomplete#complete_common_string()

    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()
    inoremap <expr><C-Space> neocomplete#start_manual_complete('omni')

    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType php set omnifunc=phpcomplete#CompletePHP
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=tern#Complete
    autocmd FileType coffee setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
endif

NeoBundle 'SirVer/ultisnips', {
      \ 'depends': [
      \     'honza/vim-snippets',
      \     'matthewsimo/angular-vim-snippets',
      \     'jamescarr/snipmate-nodejs'
      \ ]}
  let g:UltiSnipsExpandTrigger = '<C-k>'

NeoBundle 'Shougo/vimfiler.vim'
  let g:vimfiler_as_default_explorer=1
  let g:vimfiler_safe_mode_by_default=0
  nmap <space>f :VimFilerBufferDir -force-quit<CR>
NeoBundle 'tpope/vim-commentary'
NeoBundleLazyFor 'AndrewRadev/splitjoin.vim', 'mappings', ['gS', 'gJ']
  nmap gS :SplitjoinSplit<cr>
  nmap gJ :SplitjoinJoin<cr>
NeoBundleLazyFor 'AndrewRadev/sideways.vim', 'mappings', ['c-h', 'c-l']
  nmap <c-h> :SidewaysLeft<cr>
  nmap <c-l> :SidewaysRight<cr>

  nmap <Leader>r :redraw<CR>

" Motion
NeoBundle 'haya14busa/incsearch-fuzzy.vim', { 'depends': 'haya14busa/incsearch.vim' }
  map f/ <Plug>(incsearch-fuzzy-/)
  map f? <Plug>(incsearch-fuzzy-?)
  map fg/ <Plug>(incsearch-fuzzy-stay)

NeoBundle 'haya14busa/incsearch-easymotion.vim', { 'depends': 'haya14busa/incsearch.vim' }
  map z/ <Plug>(incsearch-easymotion-/)
  map z? <Plug>(incsearch-easymotion-?)
  map zg/ <Plug>(incsearch-easymotion-stay)

  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)

  set hlsearch
  let g:incsearch#auto_nohlsearch = 1
  map n  <Plug>(incsearch-nohl-n)
  map N  <Plug>(incsearch-nohl-N)
  map *  <Plug>(incsearch-nohl-*)
  map #  <Plug>(incsearch-nohl-#)
  map g* <Plug>(incsearch-nohl-g*)
  map g# <Plug>(incsearch-nohl-g#)

NeoBundleLazyFor 'Lokaltog/vim-easymotion', 'mappings', [
      \   '<Plug>(easymotion-bd-f)',
      \   '<Plug>(easymotion-overwin-f)',
      \   '<Plug>(easymotion-overwin-f2)',
      \   '<Plug>(easymotion-overwin-bd-jk)',
      \   '<Plug>(easymotion-overwin-line)',
      \   '<Plug>(easymotion-overwin-bd-w)',
      \   '<Plug>(easymotion-overwin-w)',
      \   '<Plug>(easymotion-sn)',
      \   '<Plug>(easymotion-tn)',
      \   '<Plug>(easymotion-next)',
      \   '<Plug>(easymotion-prev)',
      \   '<Plug>(easymotion-s)',
      \   '<Plug>(easymotion-t)',
      \   '<Plug>(easymotion-s2)',
      \   '<Plug>(easymotion-t2)',
      \   '<Plug>(easymotion-lineforward)',
      \   '<Plug>(easymotion-j)',
      \   '<Plug>(easymotion-k)',
      \   '<Plug>(easymotion-linebackward)',
      \   '<Plug>(easymotion-next)',
      \ ], { 'vim_version' : '7.4', 'depends': 'haya14busa/vim-easyoperator-line' }
  let g:EasyMotion_smartcase = 1

  " <Leader>f{char} to move to {char}
  map  <Leader>f <Plug>(easymotion-bd-f)
  nmap <Leader>f <Plug>(easymotion-overwin-f)

  " s{char}{char} to move to {char}{char}
  map <Leader>s <Plug>(easymotion-s2)
  nmap <Leader>s <Plug>(easymotion-overwin-f2)

  " Move to line
  map <Leader>n <Plug>(easymotion-bd-jk)
  nmap <Leader>n <Plug>(easymotion-overwin-line)

  " Move to word
  map  <Leader>w <Plug>(easymotion-bd-w)
  nmap <Leader>w <Plug>(easymotion-overwin-w)

  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)

NeoBundleLazyFor 'tmhedberg/matchit', 'filetypes', ['html', 'xhtml', 'xml', 'lua', 'vim', 'jsp']

" External programs
NeoBundle 'vim-scripts/TwitVim'

" Features
NeoBundle 'jiangmiao/auto-pairs'

NeoBundle 'ConradIrwin/vim-bracketed-paste'
NeoBundleLazyFor 'troydm/zoomwintab.vim', 'mappings', ['<c-w>o']
" <c-w>o

NeoBundleLazyFor 'junegunn/vim-easy-align', 'mappings', '<Plug>(EasyAlign)'
  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
  vmap <Leader><Enter> <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'ctrlpvim/ctrlp.vim'
  let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
  let g:ctrlp_map = '<c-f>'
  let g:ctrlp_cmd = 'CtrlP'
  let g:ctrlp_buftag_types = { 'javascript': '--language-force=javascript --javascript-types=fcmv' }
  nmap <space>p :CtrlP<CR>
  nmap <space>b :CtrlPBufTag<CR>
  nmap <space>ab :CtrlPBufTagAll<CR>
  let g:ctrlp_prompt_mappings = { 'ToggleMRURelative()': ['<F2>'] }
  let g:ctrlp_mruf_relative=1
  nmap <space>m :CtrlPMRUFiles<CR>

NeoBundle 'dhruvasagar/vim-prosession', { 'depends': 'tpope/vim-obsession' }
  nmap <space>o :Obsession

if v:version >= 702
  NeoBundle 'szw/vim-ctrlspace'
  hi CtrlSpaceSelected term=reverse ctermfg=187   guifg=#d7d7af ctermbg=0    guibg=#000000 cterm=bold gui=bold
  hi CtrlSpaceNormal   term=NONE    ctermfg=244   guifg=#808080 ctermbg=0   guibg=#000000 cterm=NONE gui=NONE
  hi CtrlSpaceSearch   ctermfg=220  guifg=#ffd700 ctermbg=NONE  guibg=NONE    cterm=bold    gui=bold
  hi CtrlSpaceStatus   ctermfg=230  guifg=#ffffd7 ctermbg=NONE   guibg=#000000 cterm=NONE    gui=NONE

  let g:ctrlspace_save_workspace_on_exit = 1
  let g:ctrlspace_save_workspace_on_switch = 1
  let g:ctrlspace_load_last_workspace_on_start = 1
  let g:ctrlspace_use_ruby_bindings = 1
  let g:ctrlspace_unicode_font = 1

  if executable('ag')
    let g:ctrlspace_glob_command = 'ag -l --nocolor -g ""'
  endif
endif

" Status bar
NeoBundle 'bling/vim-airline'
  set laststatus=2
  let g:airline_powerline_fonts = 1
  let g:airline_theme = 'airlineish'
  let g:airline_exclude_preview = 1
  " let g:airline_section_z = airline#section#create(['%{ObsessionStatus(''$'', '''')}', 'windowswap', '%3p%% ', 'linenr', ':%3v '])
NeoBundle 'paranoida/vim-airlineish', { 'depends': 'vim-airline' }

NeoBundleLazyFor 'marijnh/tern_for_vim', 'filetypes', 'javascript', { 'build': {
      \     'mac': 'npm install',
      \     'unix': 'npm install'
      \ }}
  let g:tern_map_keys=1
  let g:tern_show_argument_hints='on_hold'
  let g:tern_show_signature_in_pum=1

  " <Leader> td :TernDoc  Documentation under cursor
  " <Leader> tb :TernDocBrowse  Browse documentation
  " <Leader> tt :TernType Type hints
  " <Leader> td :TernDef  Jump to definition (yes, 'td' is duplicated)
  " <Leader> tpd  :TernDefPreview Jump to definition inside preview
  " <Leader> tsd  :TernDefSplit Definition in new split
  " <Leader> ttd  :TernDefTab Definition in new tab
  " <Leader> tr :TernRefs All references under cursor
  " <Leader> tR :TernRename Rename variable
NeoBundleLazyFor 'majutsushi/tagbar', 'mappings', ['F8'], {
      \ 'depends': 'vim-airline' }
  nmap <F8> :TagbarToggle<CR>

" Error reporting
NeoBundleLazyFor 'benekastah/neomake', 'filetypes', [
      \     'javascript',
      \     'coffeescript',
      \     'bash',
      \     'json',
      \     'java',
      \     'vim',
      \     'html',
      \     'xhtml',
      \ ]

  autocmd! BufWritePost * Neomake

  let g:neomake_javascript_enabled_makers = ['eslint']

  " load local eslint in the project root
  " modified from https://github.com/mtscout6/syntastic-local-eslint.vim
  let s:eslint_path = system('PATH=$(npm bin):$PATH && which eslint')
  let g:neomake_javascript_eslint_exe = substitute(s:eslint_path, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')

    " pip install vim-vint
  let g:neomake_vim_enabled_makers = ['vint']
  let g:neomake_coffeescript_enabled_makers = ['coffeelint']
  let g:neomake_json_enabled_makers = ['jsonlint']
  let g:neomake_java_enabled_makers = ['javac']
  " https://github.com/koalaman/shellcheck
  let g:neomake_sh_enabled_makers = ['shellcheck']
  " npm install -g stylint
  let g:neomake_stylus_enabled_makers = ['stylint']

NeoBundle 'dkprice/vim-easygrep'
  let g:EasyGrepFilesToExclude='.svn,.git,node_modules/'
  let g:EasyGrepCommand='ack'
NeoBundle 'svermeulen/vim-easyclip'
  " Manually map yanks to avoid conflicts with tpope/unimpaired
  let g:EasyClipUseYankDefaults = 0
  nmap ;y <Plug>EasyClipRotateYanksForward
  nmap ,y <Plug>EasyClipRotateYanksBackward
  nmap y <Plug>YankPreserveCursorPosition
  nmap Y <Plug>:EasyClipBeforeYank<cr>y$
  nmap yy <Plug>YankLinePreserveCursorPosition
  xmap y <Plug>VisualModeYank
  imap <c-v> <plug>EasyClipInsertModePaste

  nnoremap <space>y :Yanks<cr>

  " remap add mark
  nnoremap gm m

  " Preserve default behaviour of S, use all other substitute bindings
  let g:EasyClipUseSubstituteDefaults = 0
  nmap s <plug>SubstituteOverMotionMap
  nmap gs <plug>G_SubstituteOverMotionMap
  " nmap ss <plug>SubstituteLine
  " xmap s <plug>XEasyClipPaste
  " nmap S <plug>SubstituteToEndOfLine
  " nmap gS <plug>G_SubstituteToEndOfLine

NeoBundleLazy 'Shougo/unite.vim', { 'augroup': 'Unite' }
  let g:unite_data_directory = expand('~/.vim/.cache/unite')
  let g:unite_enable_start_insert=0
  let g:unite_source_rec_max_cache_files=5000
  let g:unite_prompt='» '

  " Custom mappings for the unite buffer
  autocmd FileType unite call s:unite_settings()
  function! s:unite_settings()

    " Enable navigation with control-j and control-k in insert mode
    imap <silent><buffer> <C-j> <Plug>(unite_select_next_line)
    imap <silent><buffer> <C-k> <Plug>(unite_select_previous_line)

    " Enable opening items in splits or tab
    " imap <silent><buffer><expr> <C-x> unite#do_action('split')
    imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
    imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')

    nmap <buffer> <ESC> <Plug>(unite_exit)

  endfunction
NeoBundleLazyFor 'dbakker/vim-paragraph-motion', 'mappings', ['{', '}']
NeoBundleLazyFor 'matze/vim-move', 'mappings', ['<C-k>', '<C-j>']
  " <C-k>   Move current line/selections up
  " <C-j>   Move current line/selections down
  let g:move_key_modifier = 'C'

" NeoBundle 'hlissner/vim-multiedit'
NeoBundleLazyFor 'terryma/vim-multiple-cursors', 'mappings', ['<C-n>', '<C-c>', '<C-p>']
  let  g:multi_cursor_exit_from_visual_mode = 0
  let  g:multi_cursor_exit_from_insert_mode = 0

" Utility
NeoBundleLazyFor 'bruno-/vim-vertical-move', 'mappings', ['[v', ']v']
NeoBundle 'tommcdo/vim-exchange'
NeoBundleLazyFor 'junegunn/rainbow_parentheses.vim', 'filetypes', [
      \     'coffee',
      \     'java',
      \     'javascript',
      \     'json',
      \     'php',
      \     'ruby',
      \     'sass',
      \     'scss',
      \     'css',
      \     'vim'
      \ ]
  autocmd FileType coffee,java,javascript,json,php,sass,scss,vim :RainbowParentheses
  let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

NeoBundleLazy 't9md/vim-choosewin', { 'augroup': '<space>w' }
  let g:choosewin_overlay_enable = 1
  nmap  - :ChooseWin<CR>
  " nmap - <Plug>(choosewin)
  let g:choosewin_color_overlay = {
        \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
        \ 'cterm': [ 25, 25 ]
        \ }
  let g:choosewin_color_overlay_current = {
        \ 'gui': ['firebrick1', 'firebrick1' ],
        \ 'cterm': [ 124, 124 ]
        \ }

  let g:choosewin_blink_on_land      = 1 " dont' blink at land
  " let g:choosewin_statusline_replace = 0 " don't replace statusline
  " let g:choosewin_tabline_replace    = 0 " don't replace tabline

NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tpope/vim-surround'
  nmap <silent> dsf ds)db
NeoBundle 'tpope/vim-repeat'
NeoBundle 'vim-scripts/bufkill.vim'
  nnoremap <space>d :BW<CR>
NeoBundle 'Raimondi/delimitMate'
  let g:delimitMate_expand_cr = 0
  let g:delimitMate_jump_expansion = 0

NeoBundleCheck

call neobundle#end()

" Colourscheme
syntax on
set background=dark

let g:base16colorspace=256  " Access colors present in 256 colorspace
colorscheme base16-colors

set t_Co=256
let html_no_pre = 1
let html_number_lines = 0

set ttyfast
set lazyredraw

" Custom highlight options
highlight LineNr ctermbg=0
highlight SignColumn ctermbg=0

" GitGutter
highlight GitGutterAdd ctermbg=0
highlight GitGutterChange ctermbg=0
highlight GitGutterDelete ctermbg=0
highlight GitGutterChangeDelete ctermbg=0
highlight GitGutterChangeDeleteFirstLine ctermbg=0

" Syntastic
highlight SyntasticErrorSign ctermbg=0 ctermfg=1
highlight SyntasticWarningSign ctermbg=0 ctermfg=3
highlight SyntasticStyleErrorSign ctermbg=0 ctermfg=1
highlight SyntasticStyleWarningSign ctermbg=0 ctermfg=3

" Tabs & indenting
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4

au FileType ruby setl sw=2 sts=2 et
au FileType javascript,css,less,sass,scss,stylus setl sw=2 sts=2 et
au FileType php,phtml,html setl sw=4 sts=4 et

set textwidth=120
set formatoptions-=t

filetype plugin indent on

" General settings
set completeopt=menuone
set number
set cindent

if v:version >= 704
  set regexpengine=1
endif

" a - terse messages (like [+] instead of [Modified])
" t - truncate file names
" I - no intro message when starting vim fileless
" T - truncate long messages to avoid having to hit a key
set shortmess=atIT

set autoread                    " Reload files changed outside vim

" wrapping
setlocal wrap linebreak nolist
set virtualedit=
setlocal display+=lastline
set showbreak=…
nnoremap k gk
nnoremap j gj
nnoremap 0 g0
nnoremap $ g$
onoremap j gj
onoremap k gk

set viminfo='1000,f1
set history=1000                " remember more commands and search history
set undolevels=1000             " remember more undo levels

" No need to show mode due to Powerline
set noshowmode

" Explicitly set encoding to utf-8
set encoding=utf-8

" Prevents MatchParen from loading, which can cause slowdown
let g:loaded_matchparen=1

" This makes vim act like all other editors, buffers can :u
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" fix delete fail on os x http://vim.wikia.com/wiki/backspace_and_delete_problems
set backspace=indent,eol,start

" Do not highlight current line
set nocursorline
set nocursorcolumn

set fcs=vert:│ " Solid line for vsplit separator

" Select all
nmap <space>a GVgg<CR>

" disable ex mode
nnoremap Q <nop>
map q: :q

" Disable K looking stuff up
map K <Nop>

" I can type :help on my own, thanks.
noremap <F1> <Esc>

" Sudo
" w!!: Writes using sudo
cnoremap w!! w !sudo tee % >/dev/null

" Spelling toggle
" http://yavin4.anshul.info/2006/05/18/spell-check-in-vim-7/
set spelllang=en_nz

" Toggle spelling & line highlighting with F7
map <silent> <F7> :set nospell!<CR>:set nospell?<CR> <bar> :set cursorline!<CR>

" Delete a given line then move back to initial line
" http://stackoverflow.com/a/8495125/187954
command! -range -nargs=0 D <line1>,<line2>d|norm ``

" Disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" Turn Off Swap Files
set noswapfile
set nobackup
set nowb

" Position saving
" http://amix.dk/vim/vimrc.html
" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" Persistent Undo
" Keep undo history across sessions, by storing in file.
silent !mkdir ~/.vim/backups > /dev/null 2>&1

if has("persistent_undo")
  set undodir=~/.vim/backups
  set undofile
endif

" Scrolling
set scrolloff=8 " Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

set smartcase
set ignorecase
set showmatch

" Show special characters
" http://vimcasts.org/episodes/show-invisibles/
" Shortcut to rapidly toggle `set list`
set list
nmap <leader>li :set list!<CR>
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:┆\ ,trail:•,extends:❯,precedes:❮
set fillchars=diff:·
set shiftround

" Open preview window at bottom
set splitbelow
set splitright

" Quickly select text you just pasted
noremap gV `[v`]

" c-s save
noremap <silent> <C-S>          :update<CR><ESC>
vnoremap <silent> <C-S>         <C-C>:update<CR><ESC>
inoremap <silent> <C-S>         <C-O>:update<CR><ESC>

" Comfortable window resizing
nnoremap <silent> <s-k> :call UpHorizontal()<CR>
nnoremap <silent> <s-j> :call DownHorizontal()<CR>
nnoremap <silent> <s-l> :call RightVertical()<CR>
nnoremap <silent> <s-h> :call LeftVertical()<CR>

"WINDOW RESIZING Down
func! DownHorizontal()
  let currentWin = winnr()
  "If no window below or above leave as is, otherwise call function
  wincmd j
  if winnr() == currentWin
    wincmd k
    if winnr() == currentWin
      wincmd k
    else
      exe currentWin . "wincmd w"
      call DownHorizontalAdjust()
    endif
  else
    exe currentWin . "wincmd w"
    call DownHorizontalAdjust()
  endif
endfun

func! DownHorizontalAdjust()
  let currentWin = winnr()
  "If very bottom window, decrease window size, otherwise just increase current window size
  wincmd j
  if winnr() == currentWin
    resize -1
  else
    exe currentWin . "wincmd w"
    resize +1
  endif
endfun

"WINDOW RESIZING Up
func! UpHorizontal ()
  let currentWin = winnr()
  "If no window below or above leave as is
  wincmd j
  if winnr() == currentWin
    wincmd k
    if winnr() == currentWin
      wincmd k
    else
      exe currentWin . "wincmd w"
      call UpHorizontalAdjust()
    endif
  else
    exe currentWin . "wincmd w"
    call UpHorizontalAdjust()
  endif
endfun

func! UpHorizontalAdjust()
  let currentWin = winnr()
  "If very top window, decrease window size, otherwise just increase current window size
  wincmd k
  if winnr() == currentWin
    resize -1
  else
    resize -1
    exe currentWin . "wincmd w"
  endif
endfun


"WINDOW RESIZING Right (only requires 1 function)
func! RightVertical()
  let currentWin = winnr()
  " If very right window, decrease window size, otherwise just increase current window size
  wincmd l
  if winnr() == currentWin
    vertical resize -1
  else
    exe currentWin . "wincmd w"
    vertical resize +1
  endif
endfun


"WINDOW RESIZING Left (only requires 1 function)
func! LeftVertical()
  let currentWin = winnr()
  " If very left window, decrease window size, otherwise just increase current window size
  wincmd h
  if winnr() == currentWin
    vertical resize -1
  else
    vertical resize -1
    exe currentWin . "wincmd w"
  endif
endfun

" http://vim.wikia.com/wiki/Reverse_selected_text
vnoremap <C-r> c<C-O>:set revins<CR><C-R>"<Esc>:set norevins<CR>"

" Profile
nnoremap <silent> <leader>DD :exe ":profile start profile.log"<cr>:exe ":profile func *"<cr>:exe ":profile file *"<cr>
nnoremap <silent> <leader>DQ :exe ":profile pause"<cr>:noautocmd qall!<cr>

