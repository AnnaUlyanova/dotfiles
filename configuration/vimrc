" The mapleader has to be set before vundle starts loading all the plugins.
let mapleader=","

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" NeoBundle {{{
    if has('vim_starting')
      set runtimepath+=~/.vim/bundle/neobundle.vim/
    endif

    call neobundle#rc(expand('~/.vim/bundle/'))

    " Let NeoBundle manage NeoBundle
    NeoBundleFetch 'Shougo/neobundle.vim'
    NeoBundle 'Shougo/vimproc', {
          \ 'build' : {
          \     'windows' : 'make -f make_mingw32.mak',
          \     'cygwin' : 'make -f make_cygwin.mak',
          \     'mac' : 'make -f make_mac.mak',
          \     'unix' : 'make -f make_unix.mak',
          \    },
          \ }

    " Colouring
    NeoBundle 'sickill/vim-sunburst'
    NeoBundle 'vim-scripts/jumphl.vim'                   " https://github.com/vim-scripts/jumphl.vim

    " Syntax
    NeoBundle 'groenewege/vim-less', {'autoload':{'filetypes':['less']}}
    NeoBundle 'cakebaker/scss-syntax.vim', {'autoload':{'filetypes':['scss','sass']}}
    NeoBundle 'ap/vim-css-color', {'autoload':{'filetypes':['css','scss','sass','less','styl']}}
    NeoBundle 'Glench/Vim-Jinja2-Syntax'                 " https://github.com/Glench/Vim-Jinja2-Syntax
    NeoBundle 'hail2u/vim-css3-syntax', {'autoload':{'filetypes':['css','scss','sass']}}
    NeoBundle 'othree/html5.vim', {'autoload':{'filetypes':['html']}}
    NeoBundle 'plasticboy/vim-markdown'
    NeoBundle 'puppetlabs/puppet-syntax-vim'
    NeoBundle 'evanmiller/nginx-vim-syntax'
    NeoBundle 'tobyS/vmustache'
    NeoBundle 'tpope/vim-haml'
    NeoBundleLazy 'teramako/jscomplete-vim', {'autoload':{'filetypes':['javascript']}} "{{{
      autocmd FileType javascript setlocal omnifunc=jscomplete#CompleteJS
    "}}}
    NeoBundle 'pangloss/vim-javascript', {'autoload':{'filetypes':['javascript']}}
    NeoBundle 'jelera/vim-javascript-syntax', {'autoload':{'filetypes':['javascript', 'json']}}
    NeoBundle 'maksimr/vim-jsbeautify', {'autoload':{'filetypes':['javascript']}} "{{{
      nnoremap <leader>fjs :call JsBeautify()<cr>
    "}}}
    NeoBundle 'mmalecki/vim-node.js', {'autoload':{'filetypes':['javascript']}}
    NeoBundle 'leshill/vim-json', {'autoload':{'filetypes':['javascript','json']}}
    NeoBundle 'othree/javascript-libraries-syntax.vim', {'autoload':{'filetypes':['javascript','coffee','ls','typescript']}}

    " Documentation
    NeoBundle 'heavenshell/vim-jsdoc'
    NeoBundle 'mudpile45/vim-phpdoc'

    " Plugins
    NeoBundle 'mhinz/vim-startify'
    NeoBundle 'AndrewRadev/splitjoin.vim'                " https://github.com/AndrewRadev/splitjoin.vim
    NeoBundle 'hlissner/vim-multiedit'
    NeoBundle 'inkarkat/closetag.vim'                    " https://github.com/inkarkat/closetag.vim
    NeoBundle 'Lokaltog/vim-easymotion'
    NeoBundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
    NeoBundle 'majutsushi/tagbar'
    NeoBundle 'scrooloose/nerdcommenter'                 " https://github.com/scrooloose/nerdcommenter
    NeoBundle 'scrooloose/syntastic'
    NeoBundle 'Shougo/unite.vim'                         " https://github.com/Shougo/unite.vim - http://bling.github.io/blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/
    NeoBundle 'Shougo/unite-session'
    NeoBundle 'Shougo/neocomplete.vim'                   " https://github.com/Shougo/neocomplete.vim - brew install vim --with-python --with-ruby --with-perl --with-lua --with-tcl
    NeoBundle 'Shougo/neosnippet'
    NeoBundle 'rstacruz/sparkup', {'rtp': 'vim/'}
    NeoBundle 'sjl/gundo.vim'
    NeoBundle 'terryma/vim-expand-region'                " https://github.com/terryma/vim-expand-region
    NeoBundle 'terryma/vim-multiple-cursors'
    NeoBundle 'terryma/vim-smooth-scroll'
    NeoBundle 'tpope/vim-fugitive' "{{{
          nnoremap <silent> <leader>gs :Gstatus<CR>
          nnoremap <silent> <leader>gd :Gdiff<CR>
          nnoremap <silent> <leader>gc :Gcommit<CR>
          nnoremap <silent> <leader>gb :Gblame<CR>
          nnoremap <silent> <leader>gl :Glog<CR>
          nnoremap <silent> <leader>gp :Git push<CR>
          nnoremap <silent> <leader>gw :Gwrite<CR>
          nnoremap <silent> <leader>gr :Gremove<CR>
          autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
          autocmd BufReadPost fugitive://* set bufhidden=delete
        "}}}
    NeoBundle 'tpope/vim-unimpaired'
    NeoBundle 'tpope/vim-surround'
    NeoBundle 'tpope/vim-eunuch'
    NeoBundle 'tpope/vim-repeat'
    NeoBundle 'xolox/vim-easytags'
    NeoBundle 'xolox/vim-misc'
    NeoBundle 'Valloric/MatchTagAlways'
    NeoBundle 'vim-scripts/YankRing.vim'
    NeoBundle 'jiangmiao/auto-pairs'
    NeoBundle 'Shougo/vimfiler.vim'
    NeoBundle 'zhaocai/linepower.vim'

    " Installation check.
    NeoBundleCheck
" }}}

" General settings{{{
    set number
    set smartindent

    set nowrap                      " Do not wrap lines by default
    set autoread                    " Reload files changed outside vim
    set showmode                    " show which mode we are currently in
    set colorcolumn=80                       " colorcolumn 80
    set history=1000                " remember more commands and search history
    set undolevels=1000             " remember more undo levels
    set lazyredraw

    " No need to show mode due to Powerline
    set noshowmode

    " Explicitly set encoding to utf-8
    set encoding=utf-8

    " This makes vim act like all other editors, buffers can :u
    " exist in the background without being in a window.
    " http://items.sjbach.com/319/configuring-vim-right
    set hidden

    set backspace=indent,eol,start  " fix delete fail on os x http://vim.wikia.com/wiki/backspace_and_delete_problems

    syntax on
    colorscheme Sunburst

    " Do not highlight current line
    set nocursorline
    set nocursorcolumn
    syntax sync minlines=256
    nnoremap <Leader>c :set cursorline!<CR>
    " Solid line for vsplit separator
    set fcs=vert:│

    " Highlight line after jump
    " https://github.com/vim-scripts/jumphl.vim
    autocmd VimEnter * DoJumpHl
" }}}

" Startify {{{
    let g:startify_show_sessions = 1
    let g:startify_session_dir = expand('~/.vim/.cache/unite/session')

    hi StartifyBracket ctermfg=100
    hi StartifyNumber  ctermfg=215
    hi StartifyPath    ctermfg=245
    hi StartifySlash   ctermfg=240
" }}}

" Tabs & indenting {{{
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set softtabstop=4
    set sw=4                     " default shiftwidth of 4 spaces
    au FileType python,ruby,puppet setl sw=2 sts=2 et
    au FileType javascript setl sw=2 sts=2 et
    au FileType php,phtml,html setl sw=4 sts=4 et

    filetype plugin indent on
    filetype plugin on
" }}}

" Sudo {{{
    " w!!: Writes using sudo
    cnoremap w!! w !sudo tee % >/dev/null
" }}}

" Buffers {{{
    " Delete the current buffer
    nnoremap <Leader>d :bdelete<CR>
" }}}

" Spelling toggle {{{
    " http://yavin4.anshul.info/2006/05/18/spell-check-in-vim-7/
    set spelllang=en_nz
    " Toggle spelling & line highlighting with F7
    map <silent> <F7> :set nospell!<CR>:set nospell?<CR> <bar> :set cursorline!<CR>
" }}}

" Disable arrow keys {{{
    map <up> <nop>
    map <down> <nop>
    map <left> <nop>
    map <right> <nop>
    imap <up> <nop>
    imap <down> <nop>
    imap <left> <nop>
    imap <right> <nop>
" }}}

" Pasting {{{
    nnoremap <f2> :set invpaste paste?<cr>
    set pastetoggle=<f2>            " toggle paste mode
" }}}

" Turn Off Swap Files {{{
    set noswapfile
    set nobackup
    set nowb
" }}}

" Position saving {{{
    " http://amix.dk/vim/vimrc.html
    " Return to last edit position when opening files (You want this!)
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
" }}}

" Syntastic {{{
    " https://github.com/scrooloose/syntastic
    " Show / hide location list
    noremap <silent><leader>lc :lcl<CR>
    noremap <silent><leader>lo :lw<CR>
    let g:syntastic_mode_map = { 'mode': 'active',
                                    \ 'passive_filetypes': ['css'] }
    let syntastic_enable_signs = 1
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_css_checkers=['csslint']
" }}}

" Persistent Undo {{{
    " Keep undo history across sessions, by storing in file.
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
" }}}

" Scrolling {{{
    set scrolloff=8                " Start scrolling when we're 8 lines away from margins
    set sidescrolloff=15
    set sidescroll=1
" }}}

" Smooth scrolling {{{
    " https://github.com/terryma/vim-smooth-scroll
    noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
    noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
    noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
    noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
" }}}

" Search {{{
    set hlsearch
    set incsearch
    set smartcase
    set ignorecase

" Clear search highlight
" http://statico.github.io/vim.html
nmap <leader>q :nohlsearch<CR>
" }}}

" Window movement convenience {{{
    " map ctrl-movement keys to window switching
    " http://stackoverflow.com/a/329935/187954
    map <c-k> <c-w><up>
    map <c-j> <c-w><down>
    map <c-l> <c-w><right>
    map <c-h> <c-w><left>
" }}}

" Show special characters {{{
    " http://vimcasts.org/episodes/show-invisibles/
    " Shortcut to rapidly toggle `set list`
    nmap <leader>l :set list!<CR>
    " Use the same symbols as TextMate for tabstops and EOLs
    set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
    set shiftround
    set linebreak
    set showbreak=↪
" }}}

" Open preview window at bottom {{{
    set splitbelow
    set splitright
" }}}

" Allow repeatable single character insertions {{{
    " http://vim.wikia.com/wiki/Insert_a_single_character
    function! RepeatChar(char, count)
      return repeat(a:char, a:count)
    endfunction
    nnoremap <leader>s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<CR>
    nnoremap <leader>S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<CR>
" }}}

" Whitespace {{{
    " Delete trailing whitespace on save
    " http://stackoverflow.com/a/1618401/187954
    fun! <SID>StripTrailingWhitespaces()
        let l = line(".")
        let c = col(".")
        %s/\s\+$//e
        call cursor(l, c)
    endfun
    autocmd FileType c,cpp,css,java,php,ruby,puppet,python,javascript,vim,sh,ant,xml autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

    " listchar=trail is not as flexible, use the below to highlight trailing
    " whitespace. Don't do it for unite windows or readonly files
    highlight ExtraWhitespace ctermbg=red guibg=red
    augroup MyAutoCmd
        autocmd BufWinEnter * if (&modifiable && &ft!='unite' && &ft!='vimfiler') | match ExtraWhitespace /\s\+$/ | endif
        autocmd InsertEnter * if (&modifiable && &ft!='unite' && &ft!='vimfiler') | match ExtraWhitespace /\s\+\%#\@<!$/ | endif
        autocmd InsertLeave * if (&modifiable && &ft!='unite' && &ft!='vimfiler') | match ExtraWhitespace /\s\+$/ | endif
        autocmd BufWinLeave * if (&modifiable && &ft!='unite' && &ft!='vimfiler') | call clearmatches() | endif
    augroup END
" }}}

" EasyTags {{{
    let g:easytags_file = '~/.vim/tags'
    let g:easytags_updatetime_min = 4000
    let g:easytags_python_enabled = 1
" }}}

" Tagbar {{{
    " https://github.com/majutsushi/tagbar
    nmap <f8> :TagbarToggle<cr>
    let g:tagbar_phpctags_bin='~/.phpctags/phpctags'
    let g:tagbar_type_css = {
    \ 'ctagstype' : 'Css',
        \ 'kinds'     : [
            \ 'c:classes',
            \ 's:selectors',
            \ 'i:identities'
        \ ]
    \ }
" }}}

" Gundo {{{
    " http://sjl.bitbucket.org/gundo.vim/#installation
    nnoremap <F5> :GundoToggle<CR>
    let g:gundo_width = 60
    let g:gundo_preview_height = 20
    let g:gundo_right = 1
    let g:gundo_close_on_revert = 1
" }}}

" JavaScript {{{
    " https://github.com/vim-scripts/vim-javascript
    let g:html_indent_inctags = "html,body,head,tbody"
    let g:html_indent_script1 = "inc"
    let g:html_indent_style1 = "inc"
" }}}

" JavaScript {{{
    " JavaScriptLibraries syntax
    " https://github.com/othree/javascript-libraries-syntax.vim
    autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1
    autocmd BufReadPre *.js let b:javascript_lib_use_underscore = 0
    autocmd BufReadPre *.js let b:javascript_lib_use_backbone = 0
    autocmd BufReadPre *.js let b:javascript_lib_use_prelude = 0
    autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 0

    " Vim JSDoc
    " https://github.com/faceleg/vim-jsdoc
    let g:jsdoc_input_description = 1
    let g:jsdoc_allow_input_prompt = 1
    " Default is <C-l>, which conflicts with window movement mapped below
    noremap <C-y>j <Plug>(jsdoc)
" }}}

" PHP {{{
    " autocmd FileType php nmap <C-y> <Plug>(phpdoc)
    "noremap <C-y>p :call pdv#DocumentWithSnip()<CR>

    au BufNewFile,BufRead *.phtml setf phtml
" }}}

" CSS {{{
    autocmd BufRead,BufNewFile *.css,*.scss,*.less setlocal foldmethod=marker foldmarker={,}

    " https://github.com/skammer/vim-css-color
    let g:cssColorVimDoNotMessMyUpdatetime = 1
" }}}

" Vim sparkup {{{
    let g:sparkup='~/.vim/bundle/vim-sparkup/ftplugin/html/sparkup.py'
" }}}

" MatchTagAlways {{{
    " https://github.com/valloric/MatchTagAlways
    let loaded_matchparen = 1
    let g:mta_use_matchparen_group = 0
    let g:mta_set_default_matchtag_color = 0
    highlight MatchTag ctermfg=black ctermbg=lightgreen guifg=black guibg=lightgreen
    let g:mta_filetypes = { 'html' : 1, 'xhtml' : 1, 'xml' : 1, 'jinja' : 1, 'ant': 1, 'php': 1 }
" }}}

" Vim filer {{{
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_safe_mode_by_default = 0
    let g:vimfiler_force_overwrite_statusline = 0

    " Like Textmate icons.
    let g:vimfiler_tree_leaf_icon = ' '
    let g:vimfiler_tree_opened_icon = '▾'
    let g:vimfiler_tree_closed_icon = '▸'
    let g:vimfiler_file_icon = '-'
    let g:vimfiler_marked_file_icon = '*'

    "autocmd VimEnter * VimFilerExplorer
    nmap <space>f :VimFilerExplorer<CR>
    nmap <leader>n :VimFilerBufferDir -explorer -find<CR>
    autocmd VimEnter * wincmd l
    autocmd bufenter * if (winnr("$") == 1 && &ft=='vimfiler') | q | endif
" }}}

" Vim powerline {{{
    let g:Powerline_symbols = "fancy"
    set laststatus=2
" }}}

" SplitJoin {{{
    " https://github.com/AndrewRadev/splitjoin.vim
    nmap gS :SplitjoinSplit<cr>
    nmap gJ :SplitjoinJoin<cr>
" }}}

" Unite {{{
    let g:unite_data_directory = expand('~/.vim/.cache/unite')
    let g:unite_enable_start_insert=0
    let g:unite_source_history_yank_enable=1
    let g:unite_source_rec_max_cache_files=5000
    let g:unite_prompt='» '

    " CTRLP
    nnoremap <leader>p :Unite -auto-preview file_rec/async<cr>
    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    call unite#filters#sorter_default#use(['sorter_rank'])
    call unite#set_profile('files', 'smartcase', 1)
    call unite#custom#source('line,outline','matchers','matcher_fuzzy')

    " ACK
    nnoremap <space>/ :Unite -no-quit -buffer-name=search grep:.<cr>

    " Buffers
    nnoremap <space>b :Unite buffer<cr>

    " <F4>: Save session
    nnoremap <F4> :<C-u>UniteSessionSave

    " Save session automatically.
    let g:unite_source_session_enable_auto_save = 1

    " Popup session selector
    noremap <space>s :Unite -buffer-name=sessions session<CR>

    " Pop up session selection if no file is specified
    "autocmd MyAutoCmd VimEnter * call s:unite_session_on_enter()
    "function! s:unite_session_on_enter()
    "    if !argc() && !exists("g:start_session_from_cmdline")
    "        Unite -buffer-name=sessions session
    "    endif
    "endfunction
" }}}

" YankRing {{{
    nnoremap <silent> <F3> :YRShow<CR>
" }}}

" Neocomplete {{{
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return neocomplete#smart_close_popup() . "\<CR>"
      " For no inserting <CR> key.
      "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType php set omnifunc=phpcomplete#CompletePHP
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
" }}}

" Neosnippet {{{
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"

    " For snippet_complete marker.
    if has('conceal')
    set conceallevel=2 concealcursor=i
    endif
" }}}
