" Profile startup time
" vim --startuptime vim.log -c q
" vim -c 'r ! cat vim.log| sort -k 2'

" The mapleader has to be set before vundle starts loading all the plugins.
let mapleader=";"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

" NeoBundleInitialisation {{{
" Note: Skip initialization for vim-tiny or vim-small.
  if !1 | finish | endif

  if has('vim_starting')
    set nocompatible               " Be iMproved

    " Required:
    set runtimepath+=~/.vim/bundle/neobundle.vim/
  endif

  call neobundle#begin(expand('~/.vim/bundle/'))

    let g:neobundle#install_process_timeout = 2000
    let g:neobundle#default_options._ = { 'verbose' : 1, 'focus' : 1 }

    " Let NeoBundle manage NeoBundle
    NeoBundleFetch 'Shougo/neobundle.vim'
    NeoBundle 'Shougo/vimproc', {
          \ 'build' : {
          \     'windows' : 'make -f make_mingw32.mak',
          \     'cygwin' : 'make -f make_cygwin.mak',
          \     'mac' : 'make -f make_mac.mak',
          \     'unix' : 'make -f make_unix.mak',
          \    },
          \ }, "{{{
        let g:neobundle#install_process_timeout = 3000
    "}}}

    " Syntax
    NeoBundle 'itchyny/landscape.vim'
"}}}

" NeoBundle {{{

    " Visual
    NeoBundle 'vim-scripts/jumphl.vim', "{{{
        autocmd VimEnter * DoJumpHl " Highlight line after jump
    "}}}
    NeoBundle 'ivyl/vim-bling'
    NeoBundle 'kana/vim-narrow'
    NeoBundle 'qstrahl/vim-matchmaker', "{{{
        let g:matchmaker_enable_startup = 0
        nnoremap <space>m :MatchmakerToggle<CR>
    "}}}

    " Indenting
    NeoBundle 'editorconfig/editorconfig-vim'
    NeoBundle '2072/PHP-Indenting-for-VIm'
    NeoBundle 'pangloss/vim-javascript'
    NeoBundle 'Yggdroot/indentLine', "{{{
      let g:indentLine_char = '┊'
      let g:indentLine_color_tty_dark = 1
      let g:indentLine_enabled = 0
      let g:indentLine_fileType = ['ruby', 'python', 'coffeescript']

      nmap <space>i :IndentLinesToggle<cr>

    "}}}

    " Languages etc
    NeoBundle 'ntpeters/vim-better-whitespace', " {{{
        autocmd FileType c,coffeescript,cpp,css,less,sass,scss,java,php,ruby,puppet,python,javascript,vim,sh,nginx,ant,xml autocmd BufWritePre <buffer> StripWhitespace
    "}}}
    NeoBundle 'Glench/Vim-Jinja2-Syntax', "{{{
        autocmd BufRead,BufNewFile *.nunjucks setlocal filetype=jinja
    "}}}
    NeoBundle 'sheerun/vim-polyglot'
    NeoBundle 'burnettk/vim-angular'
    NeoBundle 'othree/javascript-libraries-syntax.vim', "{{{
      let g:used_javascript_libs = 'underscore,angularjs'
    "}}}

    " Images
    NeoBundle 'tpope/vim-afterimage'

    " Completion
    NeoBundle 'rizzatti/dash.vim'
    if has('lua')
      NeoBundle 'Shougo/neocomplete.vim', "{{{
          " brew install vim --with-python --with-ruby --with-perl --with-lua --with-tcl
          " brew install macvim --with-cscope --with-lua --override-system-vim
          "
          " ./configure --with-features=huge --with-x --enable-pythoninterp --enable-python3interp --enable-luainterp --enable-perlinterp  --enable-rubyinterp --enable-tclinterp --enable-sniff --prefix=/usr --with-global-runtime=/usr/share/vim/site
          " set completeopt-=preview
          set completeopt+=longest,menuone,preview

          let g:acp_enableAtStartup = 0
          let g:neocomplete#enable_at_startup = 0
          let g:neocomplete#enable_smart_case = 1
          let g:neocomplete#sources#syntax#min_keyword_length = 3
          let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
          let g:neocomplete#data_directory='~/.vim/.cache/neocomplete'

          if !exists('g:neocomplcache_force_omni_patterns')
            let g:neocomplete_force_omni_patterns = {}
          endif

          let g:neocomplete_force_omni_patterns.java = '\k\.\k*'

          " Define dictionary.
          let g:neocomplete#sources#dictionary#dictionaries = {
              \ 'default' : '',
              \ 'vimshell' : $HOME.'/.vimshell_hist',
              \ 'scheme' : $HOME.'/.gosh_completions'
              \ }

          if !exists('g:neocomplete#keyword_patterns')
              let g:neocomplete#keyword_patterns = {}
          endif
          let g:neocomplete#keyword_patterns['default'] = '\h\w*'

          " Plugin key-mappings.
          inoremap <expr><C-g> neocomplete#undo_completion()
          inoremap <expr><C-l> neocomplete#complete_common_string()

          inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
          inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
          inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
          inoremap <expr><C-y>  neocomplete#close_popup()
          inoremap <expr><C-e>  neocomplete#cancel_popup()
          inoremap <expr><C-Space> neocomplete#start_manual_complete('omni')

          autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
          autocmd FileType php set omnifunc=phpcomplete#CompletePHP
          autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags

          autocmd FileType javascript setlocal omnifunc=tern#Complete
          " let g:neocomplete#force_omni_input_patterns.javascript = '[^. \t]\.\w*'

          autocmd FileType coffee setlocal omnifunc=javascriptcomplete#CompleteJS
          autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
          autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
      " }}}
    else
      NeoBundle 'Shougo/neocomplcache.vim', "{{{
      "}}}
    endif
    NeoBundle 'marijnh/tern_for_vim', {
          \     'build': {
          \         'mac': 'npm install',
          \         'unix': 'npm install'
          \     }
          \ }
    NeoBundle 'tpope/vim-commentary'
    NeoBundle 'AndrewRadev/splitjoin.vim', "{{{
        nmap gS :SplitjoinSplit<cr>
        nmap gJ :SplitjoinJoin<cr>
    " }}}
    NeoBundle 'inkarkat/closetag.vim'
    NeoBundle 'rstacruz/sparkup', "{{{
      let g:sparkupNextMapping = '<c-x>'
    "}}}

    " Documentation
    NeoBundle 'heavenshell/vim-jsdoc', "{{{
        let g:jsdoc_allow_input_prompt = 1
        let g:jsdoc_input_description = 1
        let g:jsdoc_additional_descriptions = 0
        let g:jsdoc_return = 1
        let g:jsdoc_return_type = 1
        let g:jsdoc_return_description = 1
        let g:jsdoc_default_mapping = 0 " default: 1 Set value to 0 to turn off default mapping of :JsDoc

        nnoremap <space>j :JsDoc<cr>
    "}}}

    " Motion
    NeoBundle 'Lokaltog/vim-easymotion', {
        \ 'vim_version' : '7.4'
        \ }
    NeoBundle 'dbakker/vim-paragraph-motion'
    NeoBundle 'matze/vim-move', "{{{
        " <C-k>   Move current line/selections up
        " <C-j>   Move current line/selections down
        let g:move_key_modifier = 'C'
    "}}}
    NeoBundle 'saihoooooooo/glowshi-ft.vim'
    NeoBundle 'tmhedberg/matchit'

    " Features
    NeoBundle 'godlygeek/tabular', "{{{
      vmap <Leader>a= :Tabularize /=<CR>
      vmap <Leader>a: :Tabularize /:<CR>
    "}}}
    NeoBundle 'maksimr/vim-jsbeautify', "{{{
      autocmd FileType javascript noremap <buffer>  ,bj :call JsBeautify()<cr>
      " for html
      autocmd FileType html noremap <buffer> ,bh :call HtmlBeautify()<cr>
      " for css or scss
      autocmd FileType css noremap <buffer> ,bc :call CSSBeautify()<cr>
    "}}}
    NeoBundle 'airblade/vim-gitgutter'
    NeoBundle 'kshenoy/vim-signature', "{{{
      let g:SignatureMap = {
          \ 'Leader'             :  "m",
          \ 'PlaceNextMark'      :  "m,",
          \ 'ToggleMarkAtLine'   :  "m.",
          \ 'PurgeMarksAtLine'   :  "m-",
          \ 'PurgeMarks'         :  "m<Space>",
          \ 'PurgeMarkers'       :  "m<BS>",
          \ 'GotoNextLineAlpha'  :  "']",
          \ 'GotoPrevLineAlpha'  :  "'[",
          \ 'GotoNextSpotAlpha'  :  "`]",
          \ 'GotoPrevSpotAlpha'  :  "`[",
          \ 'GotoNextLineByPos'  :  "]'",
          \ 'GotoPrevLineByPos'  :  "['",
          \ 'GotoNextSpotByPos'  :  "]`",
          \ 'GotoPrevSpotByPos'  :  "[`",
          \ 'GotoNextMarker'     :  "[+",
          \ 'GotoPrevMarker'     :  "[-",
          \ 'GotoNextMarkerAny'  :  "]=",
          \ 'GotoPrevMarkerAny'  :  "[=",
          \ 'ListLocalMarks'     :  "'?"
          \ }
    "}}}
    NeoBundle 'tpope/vim-fugitive'
    NeoBundle 'tpope/vim-sleuth'
    NeoBundle 'svermeulen/vim-easyclip', "{{{
      imap <c-v> <plug>EasyClipInsertModePaste
      nnoremap <space>y :Yanks<cr>

      " remap add mark
      nnoremap gm m

      let g:EasyClipUseSubstituteDefaults = 1
      let g:EasyClipYankHistorySize = 500
      let g:EasyClipAlwaysMoveCursorToEndOfPaste = 1
    "}}}
    if v:version >= 702
      NeoBundle 'szw/vim-ctrlspace', "{{{
        hi CtrlSpaceSelected term=reverse ctermfg=187   guifg=#d7d7af ctermbg=0    guibg=#000000 cterm=bold gui=bold
        hi CtrlSpaceNormal   term=NONE    ctermfg=244   guifg=#808080 ctermbg=0   guibg=#000000 cterm=NONE gui=NONE
        hi CtrlSpaceSearch   ctermfg=220  guifg=#ffd700 ctermbg=NONE  guibg=NONE    cterm=bold    gui=bold
        hi CtrlSpaceStatus   ctermfg=230  guifg=#ffffd7 ctermbg=NONE   guibg=#000000 cterm=NONE    gui=NONE

        let g:ctrlspace_save_workspace_on_exit = 1
        let g:ctrlspace_use_ruby_bindings = 1
        let g:ctrlspace_unicode_font = 1

        " autocmd VimEnter * CtrlSpace
      "}}}
    else
      NeoBundle 'mhinz/vim-startify', "{{{
        let g:startify_show_sessions = 1
        let g:startify_list_order = ['sessions', 'bookmarks', 'dir', 'files']
        let g:startify_session_dir = expand('~/.vim/.cache/unite/session')
        let g:startify_change_to_dir = 1

        autocmd FileType startify setlocal nocursorline
        autocmd VimEnter *
                \ if !argc() |
                \   Startify |
                \   NERDTree |
                \   execute "normal \<c-w>w" |
                \ endif

        hi StartifyBracket ctermfg=100
        hi StartifyNumber  ctermfg=215
        hi StartifyPath    ctermfg=245
        hi StartifySlash   ctermfg=240
      " }}}
      NeoBundle 'Shougo/unite-session'
    endif

    " Ruby
    NeoBundle 'tpope/vim-endwise'
    NeoBundle 'tpope/vim-rails'

    " Status bar
    NeoBundle 'bling/vim-airline', "{{{
        set laststatus=2
        let g:airline_powerline_fonts = 1
        let g:airline_theme = 'airlineish'
        let g:airline_exclude_preview = 1
    " }}}
    NeoBundle 'paranoida/vim-airlineish'

    " Error reporting
    NeoBundle 'scrooloose/syntastic', "{{{
        " Show / hide location list
        noremap <silent><leader>lc :lcl<CR>
        noremap <silent><leader>lo :lw<CR>

        noremap <F6> :SyntasticCheck<CR>

        let g:syntastic_mode_map = { 'mode': 'active',
                                    \ 'active_filetypes': ['javascript', 'php'],
                                    \ 'passive_filetypes': ['css', 'html', 'xhtml', 'scss', 'sass'] }

        let g:syntastic_check_on_open = 0
        let g:syntastic_enable_signs = 1
        let g:syntastic_auto_jump = 1
        let g:syntastic_auto_loc_list = 0
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_enable_highlighting = 1
        let g:syntastic_echo_current_error  = 1

        let g:syntastic_javascript_checkers=['jshint']
        let g:syntastic_php_checkers=['php']
        let g:syntastic_css_checkers=['csslint']
    "}}}

    "Usability
    NeoBundle 'Shougo/unite-outline', "{{{
        nnoremap <space>o :Unite outline<CR>
    "}}}
    NeoBundle 'rhysd/committia.vim'
    NeoBundle 'Shougo/unite.vim', "{{{
        let g:unite_data_directory = expand('~/.vim/.cache/unite')
        let g:unite_enable_start_insert=0
        let g:unite_source_rec_max_cache_files=5000
        let g:unite_prompt='» '

        " Searching - brew install the_silver_searcher
        let g:unite_source_grep_command='ag'
        let g:unite_source_grep_max_candidates= 200
        let g:unite_source_grep_default_opts='--nogroup --nocolor --column --ignore .sass-cache'
        nnoremap <space>/ :<C-u>Unite -buffer-name=search grep:.<cr>

        " Session
        let g:unite_source_session_enable_auto_save = 1
        nnoremap <F4> :<C-u>UniteSessionSave<space>
        noremap <space>s :Unite -quick-match -buffer-name=sessions session<CR>

        " Custom mappings for the unite buffer
        autocmd FileType unite call s:unite_settings()
        function! s:unite_settings()

            " Enable navigation with control-j and control-k in insert mode
            imap <silent><buffer> <C-j> <Plug>(unite_select_next_line)
            imap <silent><buffer> <C-k> <Plug>(unite_select_previous_line)

            " Enable opening items in splits or tab
            imap <silent><buffer><expr> <C-x> unite#do_action('split')
            imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
            imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')

            nmap <buffer> <ESC> <Plug>(unite_exit)

        endfunction

    " }}}
    NeoBundle 'sjl/gundo.vim', "{{{
        nnoremap <F5> :GundoToggle<CR>
        let g:gundo_right = 1
        let g:gundo_preview_bottom = 1
        let g:gundo_close_on_revert = 1
    " }}}
    NeoBundle 'terryma/vim-expand-region', "{{{
      vmap v <Plug>(expand_region_expand)
      vmap <S-v> <Plug>(expand_region_shrink)
    "}}}
    NeoBundle 'kris89/vim-multiple-cursors'
    NeoBundle 'hlissner/vim-multiedit'

    " Utility
    NeoBundle 't9md/vim-choosewin', "{{{
        let g:choosewin_overlay_enable = 1
        nmap  <tab> :ChooseWin<CR>

        " workaround for overlay font broken on mutibyte buffer.
        let g:choosewin_overlay_clear_multibyte = 1

        " tmux like overlay color
        let g:choosewin_color_overlay = {
                    \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
                    \ 'cterm': [ 25, 25 ]
                    \ }
        let g:choosewin_color_overlay_current = {
                    \ 'gui': ['firebrick1', 'firebrick1' ],
                    \ 'cterm': [ 124, 124 ]
                    \ }

        let g:choosewin_blink_on_land      = 0 " dont' blink at land
        let g:choosewin_statusline_replace = 0 " don't replace statusline
        let g:choosewin_tabline_replace    = 0 " don't replace tabline
    "}}}
    NeoBundle 'scrooloose/nerdtree', "{{{
        nmap <space>f :NERDTreeToggle<CR>
        nmap <space>n :NERDTreeFind<CR>
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

        let NERDTreeShowLineNumbers=1
        let g:NERDTreeWinSize=50
    "}}}
    NeoBundle 'tpope/vim-unimpaired'
    NeoBundle 'tpope/vim-surround'
    NeoBundle 'tpope/vim-eunuch'
    NeoBundle 'tpope/vim-repeat'
    NeoBundle 'vim-scripts/bufkill.vim', "{{{
        nnoremap <space>d :BW<CR>
    "}}}
    NeoBundle 'Raimondi/delimitMate', "{{{
        let delimitMate_expand_cr = 0
        let delimitMate_jump_expansion = 0
    "}}}
    NeoBundle 'Valloric/MatchTagAlways', "{{{
      let g:mta_use_matchparen_group = 1
      let g:mta_set_default_matchtag_color = 1

      highlight MatchTag ctermfg=black ctermbg=lightgreen guifg=black guibg=lightgreen
    "}}}
    NeoBundle 'Valloric/ListToggle', "{{{
      let g:lt_location_list_toggle_map = '<leader>l'
      let g:lt_quickfix_list_toggle_map = '<leader>q'
      map <space>pc :pclose
    "}}}
    NeoBundle 'xolox/vim-misc'
    NeoBundle 'xolox/vim-easytags', "{{{
      let g:easytags_include_members = 1

      set tags=./tags;
      let g:easytags_dynamic_files = 1
      let g:easytags_autorecurse = 1
    "}}}
    NeoBundle 'majutsushi/tagbar', "{{{
      nmap <F8> :TagbarToggle<CR>
    "}}}

    NeoBundleCheck
" }}}

 call neobundle#end()

" Colourscheme {{{
    syntax on
    syntax sync fromstart
    colorscheme landscape

    set t_Co=256

    hi LineNr ctermbg=016
    hi MatchParen term=reverse ctermfg=027
    highlight clear SignColumn
    hi Statement       ctermfg=39               cterm=bold
" }}}

" Tabs & indenting {{{
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set softtabstop=4

    au FileType python,ruby setl sw=2 sts=2 et
    au FileType javascript,css,less,sass,scss setl sw=2 sts=2 et
    au FileType php,phtml,html setl sw=4 sts=4 et

    filetype plugin indent on
    filetype plugin on
" }}}

" General settings {{{
    set number
    set cindent

    if v:version >= 704
      set re=1
    endif

    " a - terse messages (like [+] instead of [Modified])
    " t - truncate file names
    " I - no intro message when starting vim fileless
    " T - truncate long messages to avoid having to hit a key
    set shortmess=atIT

    set nowrap                      " Do not wrap lines by default
    set autoread                    " Reload files changed outside vim

    set viminfo='1000,f1
    set history=1000                " remember more commands and search history
    set undolevels=1000             " remember more undo levels
    set ttyfast " u got a fast terminal
    set lazyredraw

    " No need to show mode due to Powerline
    set noshowmode

    " Explicitly set encoding to utf-8
    set encoding=utf-8

    " Prevents MatchParen from loading, which can cause slowdown
    " let g:loaded_matchparen=1

    " This makes vim act like all other editors, buffers can :u
    " exist in the background without being in a window.
    " http://items.sjbach.com/319/configuring-vim-right
    set hidden

    " fix delete fail on os x http://vim.wikia.com/wiki/backspace_and_delete_problems
    set backspace=indent,eol,start

    " Do not highlight current line
    set nocursorline
    set nocursorcolumn

    set fcs=vert:│ " Solid line for vsplit separator

    " Select all
    nmap <space>a ggVG<CR>

    " disable ex mode
    nnoremap Q <nop>
    map q: :q

    " Disable K looking stuff up
    map K <Nop>

    " I can type :help on my own, thanks.
    noremap <F1> <Esc>

    " Automatically reload vimrc
    "autocmd! bufwritepost .vimrc nested source %
" }}}

" Sudo {{{
    " w!!: Writes using sudo
    cnoremap w!! w !sudo tee % >/dev/null
" }}}

" Spelling toggle {{{
    " http://yavin4.anshul.info/2006/05/18/spell-check-in-vim-7/
    set spelllang=en_nz
    " Toggle spelling & line highlighting with F7
    map <silent> <F7> :set nospell!<CR>:set nospell?<CR> <bar> :set cursorline!<CR>
" }}}

" {{{
  " Type 12<Enter> to go to line 12 (12G breaks my wrist)
  " Hit Enter to go to end of file.
  " Hit Backspace to go to beginning of file.
  nnoremap <BS> gg
  nnoremap <CR> G
" }}}

" Disable arrow keys {{{
    map <up> <nop>
    map <down> <nop>
    map <left> <nop>
    map <right> <nop>
    imap <up> <nop>
    imap <down> <nop>
    imap <left> <nop>
    imap <right> <nop>
" }}}

" Turn Off Swap Files {{{
    set noswapfile
    set nobackup
    set nowb
" }}}

" Position saving {{{
    " http://amix.dk/vim/vimrc.html
    " Return to last edit position when opening files (You want this!)
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
" }}}

" Persistent Undo {{{
    " Keep undo history across sessions, by storing in file.
    silent !mkdir ~/.vim/backups > /dev/null 2>&1

    if has("persistent_undo")
      set undodir=~/.vim/backups
      set undofile
    endif
" }}}

" Scrolling {{{
    set scrolloff=8 " Start scrolling when we're 8 lines away from margins
    set sidescrolloff=15
    set sidescroll=1
" }}}

" Search & Replace {{{
    set hlsearch
    set incsearch
    set smartcase
    set ignorecase
    set showmatch

    " Clear search highlight http://statico.github.io/vim.html
    nmap <space>c :nohlsearch<CR>

    " Replace all instances of word under cursor
    nnoremap <space>r :%s/\<<C-r><C-w>\>//g<Left><Left>
" }}}

" Show special characters {{{
    " http://vimcasts.org/episodes/show-invisibles/
    " Shortcut to rapidly toggle `set list`
    set list
    nmap <leader>li :set list!<CR>
    " Use the same symbols as TextMate for tabstops and EOLs
    set listchars=tab:┆\ ,trail:•,extends:❯,precedes:❮
    set shiftround
    set linebreak
    set showbreak=↪
" }}}

" Open preview window at bottom {{{
    set splitbelow
    set splitright
" }}}

" Reselect visual block after indent/outdent {{{
  " vnoremap < <gv
  " vnoremap > >gv
" }}}

" PHP {{{
    au BufNewFile,BufRead *.phtml setf phtml
" }}}

" CSS {{{
    autocmd BufRead,BufNewFile *.css,*.scss,*.less setlocal foldmethod=marker foldmarker={,}
" }}}

" {{{
   let g:EclimJavascriptValidate = 0
   let g:EclimCompletionMethod = 'omnifunc'

  " Import the class under the cursor with <leader>i (:h mapleader):
  autocmd FileType java map <buffer> ,i :JavaImport<cr>
  autocmd FileType java map <buffer> ,fi :JavaImportOrganize<cr>
  autocmd FileType java map <buffer> ,h :JavaCallHeirarchy<cr>
  autocmd FileType java map <buffer> ,c :JavaCorrect<cr>
  autocmd FileType java map <buffer> ,dc :JavaDocComment<cr>

  autocmd FileType java map <buffer> ,d :JavaDocSearch -x declarations<cr>

  " Perform a context sensitive search of the element under the cursor with <enter>.
  autocmd FileType java map <buffer> <cr> :JavaSearchContext<cr>
"}}}

" Pasting {{{
    map <f2> :set invpaste paste?<cr>
    imap <F2> <ESC>:set paste<CR>i<Right>

    set pastetoggle=<f2>
    au InsertLeave * set nopaste

    " Automatically jump to end of text you pasted:
    vnoremap <silent> y y`]
    vnoremap <silent> p p`]
    nnoremap <silent> p p`]

    " Quickly select text you just pasted
    noremap gV `[v`]
" }}}

" Comfortable window resizing
nnoremap <silent> <s-k> :call UpHorizontal()<CR>
nnoremap <silent> <s-j> :call DownHorizontal()<CR>
nnoremap <silent> <s-l> :call RightVertical()<CR>
nnoremap <silent> <s-h> :call LeftVertical()<CR>

"WINDOW RESIZING Down
func! DownHorizontal()
let currentWin = winnr()
"If no window below or above leave as is, otherwise call function
   wincmd j
if winnr() == currentWin
   wincmd k
   if winnr() == currentWin
      wincmd k
   else
      exe currentWin . "wincmd w"
      call DownHorizontalAdjust()
   endif
else
   exe currentWin . "wincmd w"
   call DownHorizontalAdjust()
endif
endfun

func! DownHorizontalAdjust()
let currentWin = winnr()
"If very bottom window, decrease window size, otherwise just increase current window size
wincmd j
if winnr() == currentWin
   resize -1
else
   exe currentWin . "wincmd w"
   resize +1
endif
endfun


"WINDOW RESIZING Up
func! UpHorizontal ()
let currentWin = winnr()
"If no window below or above leave as is
   wincmd j
if winnr() == currentWin
   wincmd k
   if winnr() == currentWin
      wincmd k
   else
      exe currentWin . "wincmd w"
      call UpHorizontalAdjust()
   endif
else
   exe currentWin . "wincmd w"
   call UpHorizontalAdjust()
endif
endfun

func! UpHorizontalAdjust()
let currentWin = winnr()
"If very top window, decrease window size, otherwise just increase current window size
   wincmd k
   if winnr() == currentWin
      resize -1
   else
      resize -1
      exe currentWin . "wincmd w"
endif
endfun


"WINDOW RESIZING Right (only requires 1 function)
func! RightVertical()
let currentWin = winnr()
" If very right window, decrease window size, otherwise just increase current window size
wincmd l
if winnr() == currentWin
   vertical resize -1
else
  exe currentWin . "wincmd w"
  vertical resize +1
endif
endfun


"WINDOW RESIZING Left (only requires 1 function)
func! LeftVertical()
let currentWin = winnr()
" If very left window, decrease window size, otherwise just increase current window size
wincmd h
if winnr() == currentWin
   vertical resize -1
else
  vertical resize -1
  exe currentWin . "wincmd w"
endif
endfun

