" Change leader to a comma because the backslash is too far away
" That means all \x commands turn into ,x
" The mapleader has to be set before vundle starts loading all
" the plugins.
let mapleader=","

" ====== Load pathogen ======
execute pathogen#infect()

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" ====== General settings ======
set number
set smartindent

set nowrap                      " Do not wrap lines by default
set autoread                    " Reload files changed outside vim
set showmode                    " show which mode we are currently in
set cc=80                       " colorcolumn 80
set history=1000                " remember more commands and search history
set undolevels=1000             " remember more undo levels

" This makes vim act like all other editors, buffers can :u
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

set backspace=indent,eol,start  " fix delete fail on os x http://vim.wikia.com/wiki/backspace_and_delete_problems

syntax on
colorscheme Sunburst

" ====== Tabs ======
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set sw=4                     " default shiftwidth of 4 spaces
au FileType python,ruby,puppet setl sw=2 sts=2 et
au FileType javascript setl sw=2 sts=2 et
au FileType php,phtml,html setl sw=4 sts=4 et

filetype plugin indent on
filetype plugin on

" ====== Spelling toggle ======
" http://yavin4.anshul.info/2006/05/18/spell-check-in-vim-7/
set spelllang=en_nz
" Toggle spelling & line highlighting with F7
map <silent> <F7> :set nospell!<CR>:set nospell?<CR> <bar> :set cursorline!<CR>

" ====== Disable arrow keys ======
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" ====== Pasting ======
nnoremap <f2> :set invpaste paste?<cr>
set pastetoggle=<f2>            " toggle paste mode

" ====== Turn Off Swap Files ======
set noswapfile
set nobackup
set nowb

" ====== Syntastic ======
" https://github.com/scrooloose/syntastic
" Show / hide location list
noremap <silent><leader>lc :lcl<CR>
noremap <silent><leader>lo :lw<CR>
let g:syntastic_mode_map = { 'mode': 'active' }
let syntastic_enable_signs = 1
let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_css_checkers=['csslint']


" ====== Persistent Undo ======
" Keep undo history across sessions, by storing in file.
silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" ======= Scrolling ======
set scrolloff=8                " Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" ====== Smooth scrolling ======
" https://github.com/terryma/vim-smooth-scroll
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

" ====== Search ======
set hlsearch
set incsearch
set smartcase
set ignorecase

" Clear search highlight
" http://statico.github.io/vim.html
nmap <leader>q :nohlsearch<CR>

" ====== Window movement convenience ======
" map ctrl-movement keys to window switching
" http://stackoverflow.com/a/329935/187954
map <c-k> <c-w><up>
map <c-j> <c-w><down>
map <c-l> <c-w><right>
map <c-h> <c-w><left>

" ======= Show special characters ======
" http://vimcasts.org/episodes/show-invisibles/
" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" ====== Open preview window at bottom ======
set splitbelow
set splitright
"function! PreviewDown()
"    if !&previewwindow
"        " Restore scroll position
"        "normal! `xzt```
"    endif
"    if &previewwindow
"        " Save scroll position
"        "normal! Hmx``
"    endif
"endf
"au BufWinEnter * call PreviewDown()
"au BufWinLeave * call PreviewDown()

" ====== Allow repeatable single character insertions ======
" http://vim.wikia.com/wiki/Insert_a_single_character
function! RepeatChar(char, count)
  return repeat(a:char, a:count)
endfunction
nnoremap <leader>s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<CR>
nnoremap <leader>S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<CR>

" ====== Delete trailing spaces on save ======
" http://stackoverflow.com/a/1618401/187954
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd FileType c,cpp,css,java,php,ruby,puppet,python,javascript,vim,sh,ant,xml autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" ====== Niji (Rainbow)  ======
" https://github.com/amdt/vim-niji
let g:niji_match_all_filetypes = 1

" ====== EasyTags ======
let g:easytags_file = '~/.vim/tags'
let g:easytags_updatetime_min = 4000

" ====== Tagbar ======
" https://github.com/majutsushi/tagbar
nmap <f8> :TagbarToggle<cr>
let g:tagbar_phpctags_bin='~/.phpctags/phpctags'
let g:tagbar_type_css = {
\ 'ctagstype' : 'Css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
\ }

" ====== Gundo ======
" http://sjl.bitbucket.org/gundo.vim/#installation
nnoremap <F5> :GundoToggle<CR>
let g:gundo_width = 60
let g:gundo_preview_height = 20
let g:gundo_right = 1
"let g:gundo_preview_bottom = 1
let g:gundo_close_on_revert = 1

" ====== JavaScript ======
" https://github.com/vim-scripts/vim-javascript
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

au FileType javascript call JavaScriptFold()

" ====== JavaScript Libraries Syntax ======
" https://github.com/othree/javascript-libraries-syntax.vim
autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1
autocmd BufReadPre *.js let b:javascript_lib_use_underscore = 0
autocmd BufReadPre *.js let b:javascript_lib_use_backbone = 0
autocmd BufReadPre *.js let b:javascript_lib_use_prelude = 0
autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 0

" ====== Vim JSDoc ======
" https://github.com/faceleg/vim-jsdoc
let g:jsdoc_input_description = 1
let g:jsdoc_allow_input_prompt = 1
" Default is <C-l>, which conflicts with window movement mapped below
noremap <C-y>j <Plug>(jsdoc)

" ====== Vim PHPDoc ======
" autocmd FileType php nmap <C-y> <Plug>(phpdoc)
noremap <C-y>p :call pdv#DocumentWithSnip()<CR>

" ====== Filetype overrides ======
au BufNewFile,BufRead *.phtml setf phtml

" ====== CSS Family folding ======
autocmd BufRead,BufNewFile *.css,*.scss,*.less setlocal foldmethod=marker foldmarker={,}

" ====== Vim sparkup ======
let g:sparkup='~/.vim/bundle/vim-sparkup/ftplugin/html/sparkup.py'

" ====== MatchTagAlways ======
" https://github.com/valloric/MatchTagAlways
let g:mta_use_matchparen_group = 0
let g:mta_set_default_matchtag_color = 0
highlight MatchTag ctermfg=black ctermbg=lightgreen guifg=black guibg=lightgreen
let g:mta_filetypes = { 'html' : 1, 'xhtml' : 1, 'xml' : 1, 'jinja' : 1, 'ant': 1, 'php': 1 }

" ====== Vim CSS Color ======
" https://github.com/skammer/vim-css-color
let g:cssColorVimDoNotMessMyUpdatetime = 1

" ====== Highlight unwanted whitespace ======
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" autocmd InsertLeaveEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" ====== Highlight current line ======
set cursorline
nnoremap <Leader>c :set cursorline!<CR>

" ====== Omni completion ======
" Enable omni completion. Not required if they are already set elsewhere in .vimrc
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" drop down colours
highlight Pmenu ctermbg=black ctermfg=white

" ====== CtrlP.vim ======
" https://github.com/kien/ctrlp.vim/blob/master/doc/ctrlp.txt
let g:ctrlp_map = '<leader>p'
let g:ctrlp_arg_map = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_bottom = 0         " Show at top of window
let g:ctrlp_jump_to_buffer = 'Et'           " Jump to tab AND buffer if already open
"let g:ctrlp_split_window = 1               " <CR> = New Tab
let g:ctrlp_open_new_file = 'v'             " Open newly created files in a new tab
let g:ctrlp_open_multiple_files = '2vjr'    " Open multiple files in new tabs

" ====== NERDtree ======
let NERDTreeWinSize=26
autocmd vimenter * NERDTree
" Close vim if NERDTree is the only thing open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" Focus file window when opening vim or a file in a new tab
autocmd VimEnter * set winfixwidth
autocmd VimEnter * wincmd l
nmap <leader>n :NERDTreeFind<CR>           " Show the current file in the tree

" ====== Vim powerline ======
" set rtp+=~/.vim/bundle/powerline/bindings/vim
let g:Powerline_symbols = "fancy"
set laststatus=2

" ====== YankRing ======
nnoremap <silent> <F3> :YRShow<CR>

" ====== SplitJoin ======
" https://github.com/AndrewRadev/splitjoin.vim
nmap gS :SplitjoinSplit<cr>
nmap gJ :SplitjoinJoin<cr>

" Statusline modifications, added Fugitive Status Line & Syntastic Error Message {{{2
let g:last_mode = ''
function! Mode()
  let l:mode = mode()

  if l:mode !=# g:last_mode
    let g:last_mode = l:mode

    hi User2 guifg=#005f00 guibg=#dfff00 gui=BOLD ctermfg=22 ctermbg=190 cterm=BOLD
    hi User3 guifg=#FFFFFF guibg=#414243 ctermfg=255 ctermbg=241
    hi User4 guifg=#414234 guibg=#2B2B2B ctermfg=241 ctermbg=234
    hi User5 guifg=#4e4e4e guibg=#FFFFFF gui=bold ctermfg=239 ctermbg=255 cterm=bold
    hi User6 guifg=#FFFFFF guibg=#8a8a8a ctermfg=255 ctermbg=245
    hi User7 guifg=#ffff00 guibg=#8a8a8a gui=bold ctermfg=226 ctermbg=245 cterm=bold
    hi User8 guifg=#8a8a8a guibg=#414243 ctermfg=245 ctermbg=241

    if l:mode ==# 'n'
      hi User3 guifg=#dfff00 ctermfg=190
    elseif l:mode ==# "i"
      hi User2 guifg=#005fff guibg=#FFFFFF ctermfg=27 ctermbg=255
      hi User3 guifg=#FFFFFF ctermfg=255
    elseif l:mode ==# "R"
      hi User2 guifg=#FFFFFF guibg=#df0000 ctermfg=255 ctermbg=160
      hi User3 guifg=#df0000 ctermfg=160
    elseif l:mode ==? "v" || l:mode ==# "^V"
      hi User2 guifg=#4e4e4e guibg=#ffaf00 ctermfg=239 ctermbg=214
      hi User3 guifg=#ffaf00 ctermfg=214
    endif
  endif

  if l:mode ==# "n"
    return "  NORMAL "
  elseif l:mode ==# "i"
    return "  INSERT "
  elseif l:mode ==# "R"
    return "  REPLACE "
  elseif l:mode ==# "v"
    return "  VISUAL "
  elseif l:mode ==# "V"
    return "  V·LINE "
  elseif l:mode ==# "^V"
    return "  V·BLOCK "
  else
    return l:mode
  endif
endfunction

function! GitStatus()
  let result = split(system('git status --porcelain '.shellescape(expand('%:t'))." 2>/dev/null|awk '{print $1}'"))
  if len(result) > 0 | return join(result).' ' | else | return '' | endif
endfunction

set statusline=%2*%{Mode()}%3*⮀
set statusline+=%#StatusLine#
set statusline+=%{strlen(fugitive#statusline())>0?'\ ⭠\ ':''}
set statusline+=%{matchstr(fugitive#statusline(),'(\\zs.*\\ze)')}
set statusline+=%{strlen(fugitive#statusline())>0?'\ \ ⮁\ ':'\ '}
set statusline+=%f%<\ %{&ro?'⭤':''}
set statusline+=%{GitStatus()}
set statusline+=%{&mod?'+':''}
set statusline+=%4*⮀
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%=
set statusline+=%4*⮂
set statusline+=%#StatusLine#
set statusline+=\ %{strlen(&fileformat)>0?&fileformat.'\ ⮃\ ':''}
set statusline+=%{strlen(&fileencoding)>0?&fileencoding.'\ ⮃\ ':''}
set statusline+=%{strlen(&filetype)>0?&filetype.'\ ':''}
set statusline+=%8*⮂%7*\ %p%%\
set statusline+=%6*⮂%5*⭡\ \ %l:%c\
" }}}2
